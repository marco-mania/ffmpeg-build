#!/usr/bin/env bash

function execute() {
    echo "$ $*"
    OUTPUT=$("$@" 2>&1)
    if [ $? -ne 0 ]; then
        echo "$OUTPUT"
        echo ""
        echo "ERROR: Failed to execute $* in dir $(pwd)" >&2
        exit 1
    fi
}

function download() {
    url="$1"
    filename="${url##*/}"
    if [ -f $filename ]; then
        echo $(tar -tf "$filename" | grep -o '^[^/]*' | sort -u)
        return 0
    fi
    wget -q "$url"
    if [ $? -ne 0 ]; then
        echo "ERROR: Failed to download $url" >&2
        exit 1
    fi
    tar xf "$filename"
    if [ $? -ne 0 ]; then
        echo "ERROR: Failed to extract $filename" >&2
        exit 1
    fi
    # return the (main) directory name in the tar archive
    echo $(tar -tf "$filename" | grep -o '^[^/]*' | sort -u)
}

function download_from_git() {
    url="$1"
    reponame="$(basename -s .git $url)"
    if [ -d $reponame ]; then
        echo $reponame
        return 0
    fi
    git clone "$url"
    if [ $? -ne 0 ]; then
        echo "ERROR: Failed to clone $url" >&2
        exit 1
    fi
    echo $reponame
}

jflag=
jval=2
ffmpeg_version="7.1"
while getopts j:v: flag
do
    case "${flag}" in
        j) jflag=1; jval="$OPTARG";;
        v) ffmpeg_version="$OPTARG";;
        :) echo "ERROR: Option -${OPTARG} requires an argument"; exit 1;;
        ?) echo "ERROR: Invalid option: -${OPTARG}"; exit 1;;
    esac
done

#$TARGET_DIR from Containerfile
BIN_DIR=$TARGET_DIR/bin
LIB_DIR=$TARGET_DIR/lib
TMP_DIR=/tmp

function build_zlib() {
    [ ! -f config.status ] && execute ./configure --prefix=$TARGET_DIR
    execute make -j $jval
    execute sudo make install
}

function build_zstd() {
    export CFLAGS+=' -ffat-lto-objects'
    export CXXFLAGS+=' -ffat-lto-objects'
    execute cmake -S build/cmake -B build -G Ninja \
    -DCMAKE_BUILD_TYPE=None \
    -DCMAKE_INSTALL_PREFIX=$TARGET_DIR \
    -DZSTD_ZLIB_SUPPORT=OFF \
    -DZSTD_LZMA_SUPPORT=OFF \
    -DZSTD_LZ4_SUPPORT=OFF \
    -DZSTD_BUILD_CONTRIB=ON \
    -DZSTD_BUILD_TESTS=ON \
    -DZSTD_PROGRAMS_LINK_SHARED=ON
    execute cmake --build build
    execute sudo cmake --install build
}

function build_vo-amrwbenc() {
    execute ./configure --prefix=$TARGET_DIR
    execute make -j $jval
    execute sudo make install
}

function build_opencore-amr() {
    execute ./configure --prefix=$TARGET_DIR --disable-examples
    execute make
    execute sudo make install
}

function build_yasm() {
    [ ! -f config.status ] && execute ./configure --prefix=$TARGET_DIR --bindir=$BIN_DIR
    execute make -j $jval
    execute sudo make install
}

function build_nasm() {
    [ ! -f config.status ] && execute ./configure --prefix=$TARGET_DIR --bindir=$BIN_DIR
    execute make -j $jval
    execute sudo make install
}

function build_openssl() {
    PATH="$BIN_DIR:$PATH" execute ./Configure --prefix=$TARGET_DIR --libdir=$TARGET_DIR/lib
    PATH="$BIN_DIR:$PATH" execute make -j $jval
    execute sudo make install_sw
}

function build_x264() {
    [ ! -f config.status ] && PATH="$BIN_DIR:$PATH" execute ./configure --prefix=$TARGET_DIR --disable-opencl --enable-pic --enable-shared
    PATH="$BIN_DIR:$PATH" execute make -j $jval
    execute sudo make install
}

function build_x265() {
    cd source

    execute cmake -B build-12 -G Ninja \
    -DCMAKE_INSTALL_PREFIX=$TARGET_DIR \
    -DHIGH_BIT_DEPTH=TRUE \
    -DMAIN12=TRUE \
    -DEXPORT_C_API=FALSE \
    -DENABLE_CLI=FALSE \
    -DENABLE_SHARED=TRUE \
    -Wno-dev
    execute sed -i 's/-lgcc_s/-lgcc_eh/g' build-12/x265.pc
    execute ninja -C build-12

    execute cmake -B build-10 -G Ninja \
    -DCMAKE_INSTALL_PREFIX=$TARGET_DIR \
    -DHIGH_BIT_DEPTH=TRUE \
    -DEXPORT_C_API=FALSE \
    -DENABLE_CLI=FALSE \
    -DENABLE_SHARED=TRUE \
    -Wno-dev
    execute sed -i 's/-lgcc_s/-lgcc_eh/g' build-10/x265.pc
    execute ninja -C build-10

    execute cmake -B build -G Ninja \
    -DCMAKE_INSTALL_PREFIX=$TARGET_DIR \
    -DENABLE_SHARED=TRUE \
    -DENABLE_HDR10_PLUS=TRUE \
    -DLINKED_10BIT=TRUE \
    -DLINKED_12BIT=TRUE \
    -Wno-dev
    execute sed -i 's/-lgcc_s/-lgcc_eh/g' build/x265.pc
    execute ninja -C build

    execute sudo ninja -C build install
}

function build_fdk-aac() {
    execute autoreconf -fiv
    [ ! -f config.status ] && execute ./configure --prefix=$TARGET_DIR
    execute make -j $jval
    execute sudo make install
}

function build_libpng() {
    CPPFLAGS="-I$TARGET_DIR/include" LDFLAGS="-L$TARGET_DIR/lib" execute ./configure --prefix=$TARGET_DIR
    execute make -j $jval check
    execute sudo make install
}

function build_harfbuzz() {
    execute ./configure --prefix=$TARGET_DIR
    execute make -j $jval
    execute sudo make install
}

function build_freetype() {
    execute ./configure --prefix=$TARGET_DIR
    execute make -j $jval
    execute sudo make install
}

function build_fontconfig() {
    execute ./configure --prefix=$TARGET_DIR
    execute make -j $jval
    execute sudo make install
}

function build_fribidi() {
    execute ./autogen.sh
    execute ./configure --prefix=$TARGET_DIR --disable-debug --disable-deprecated
    execute make
    execute sudo make install
}

function build_libass() {
    execute ./configure --prefix=$TARGET_DIR
    execute make -j $jval
    execute sudo make install
}

function build_mp3lame() {
    [ ! -f config.status ] && execute ./configure --prefix=$TARGET_DIR --enable-nasm $lame_build_target
    execute make
    execute sudo make install
}

function build_opus() {
    [ ! -f config.status ] && execute ./configure --prefix=$TARGET_DIR
    execute make
    execute sudo make install
}

function build_libvpx() {
    [ ! -f config.status ] && PATH="$BIN_DIR:$PATH" execute ./configure --prefix=$TARGET_DIR --disable-examples --disable-unit-tests --enable-pic
    PATH="$BIN_DIR:$PATH" execute make -j $jval
    execute sudo make install
}

function build_rtmpdump() {
    execute make -j $jval
    execute sudo make install prefix=$TARGET_DIR
}

function build_soxr() {
    PATH="$BIN_DIR:$PATH" execute cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=$TARGET_DIR -DWITH_OPENMP:bool=off -DBUILD_TESTS:bool=off
    execute make -j $jval
    execute sudo make install
}

function build_libvidstab() {
    PATH="$BIN_DIR:$PATH" execute cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=$TARGET_DIR
    execute make -j $jval
    execute sudo make install
}

function build_openjpeg() {
    PATH="$BIN_DIR:$PATH" execute cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=$TARGET_DIR
    execute make -j $jval
    execute sudo make install
}

function build_zimg() {
    execute ./autogen.sh
    execute ./configure --prefix=$TARGET_DIR
    sed -i 's/size_t/std::size_t/g' src/zimg/colorspace/matrix3.cpp
    execute make -j $jval
    execute sudo make install
}

function build_libwebp() {
    execute ./autogen.sh
    execute ./configure --prefix=$TARGET_DIR
    execute make -j $jval
    execute sudo make install
}

function build_libogg() {
    execute ./configure --prefix=$TARGET_DIR
    execute make -j $jval
    execute sudo make install
}

function build_libvorbis() {
    chmod 755 configure
    execute ./configure --prefix=$TARGET_DIR
    execute make -j $jval
    execute sudo make install
}

function build_speex() {
    execute ./autogen.sh
    execute ./configure --prefix=$TARGET_DIR
    execute make -j $jval
    execute sudo make install
}

function build_libsdl() {
    execute ./autogen.sh
    execute ./configure --prefix=$TARGET_DIR
    execute make -j $jval
    execute sudo make install
}

function build_srt() {
    mkdir -p build
    cd build
    execute cmake -DENABLE_APPS=OFF -DCMAKE_INSTALL_PREFIX=$TARGET_DIR -DENABLE_C_DEPS=ON ..
    sed -i 's/-lgcc_s/-lgcc_eh/g' haisrt.pc
    sed -i 's/-lgcc_s/-lgcc_eh/g' srt.pc
    execute make -j $jval
    execute sudo make install
}

function build_librist() {
    mkdir -p build
    cd build
    execute meson .. --prefix=$TARGET_DIR --bindir="../bin/" --libdir="$TARGET_DIR/lib"
    execute ninja
    execute sudo ninja install
}

function build_theora() {
    execute ./autogen.sh
    execute ./configure --prefix=$TARGET_DIR
    execute make -j $jval
    execute sudo make install
}

function build_xvid() {
    cd build/generic
    execute ./configure --prefix=$TARGET_DIR
    execute make -j $jval
    execute sudo make install
}

function build_dav1d() {
    execute meson build --prefix=$TARGET_DIR --buildtype=release --libdir=$LIB_DIR
    execute ninja -C build
    execute sudo ninja -C build install
}

function build_svt-av1() {
    execute cmake -DCMAKE_INSTALL_PREFIX=$TARGET_DIR -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release
    execute make -j $jval
    execute sudo make install
}

function build_frei0r() {
    execute cmake -B build -G Ninja -D CMAKE_INSTALL_PREFIX=$TARGET_DIR
    execute cmake --build build
    execute sudo cmake --install build
}

# YAML_DEPS_FILE from Containerfile

c=$(yq '.deps | keys[]' $YAML_DEPS_FILE | wc -l)

for i in $(yq '.deps | keys[]' $YAML_DEPS_FILE); do

    j=$((i+1))

    pkg_name=$(yq -r ".deps[$i].name" $YAML_DEPS_FILE)
    pkg_url=$(yq -r ".deps[$i].url" $YAML_DEPS_FILE)
    pkg_from_git=$(yq -r ".deps[$i].from_git" $YAML_DEPS_FILE)
    if [ "$pkg_from_git" == "true" ]; then
        echo "[Dep $j/$c] Cloning ${pkg_url}..."
        pkg_build_root=$(download_from_git "${pkg_url}")
        echo "[Dep $j/$c] Clone finished"
    else
        echo "[Dep $j/$c] Downloading ${pkg_url}..."
        pkg_build_root=$(download "${pkg_url}")
        echo "[Dep $j/$c] Download finished"
    fi
    if [ ! -f $TMP_DIR/${pkg_name}.build-flag ]; then
        (
            echo "[Dep $j/$c] Building ${pkg_name}..."
            cd ${pkg_build_root}
            eval build_${pkg_name}
            touch $TMP_DIR/${pkg_name}.build-flag
            echo "[Dep $j/$c] Build finished"
        ) || exit 1
    fi

done

pkg_ffmpeg_dir=$(download "https://github.com/FFmpeg/FFmpeg/archive/refs/tags/n7.1.tar.gz")

cd $pkg_ffmpeg_dir

echo "*** Building FFmpeg ***"

[ ! -f config.status ] && PATH="$BIN_DIR:$PATH" \
  PKG_CONFIG_PATH="$TARGET_DIR/lib/pkgconfig" execute ./configure \
  --enable-shared \
  --enable-nonfree \
  --enable-fontconfig \
  --enable-gpl \
  --enable-openssl \
  --enable-libsvtav1 \
  --enable-libdav1d \
  --enable-libx264 \
  --enable-libx265 \
  --enable-libvpx \
  --enable-libxvid \
  --enable-libvidstab \
  --enable-libzimg \
  --enable-libopencore-amrnb \
  --enable-libopencore-amrwb \
  --enable-libmp3lame \
  --enable-libopus \
  --enable-libvorbis \
  --enable-libtheora \
  --enable-libspeex \
  --enable-libfdk-aac \
  --enable-libwebp \
  --enable-libsrt \
  --enable-frei0r \
  --enable-librtmp \
  --enable-libsoxr \
  --enable-libopenjpeg \
  --enable-libvo-amrwbenc \
  --enable-libass \
  --disable-debug \
  --disable-doc \
  --disable-ffplay \
  --enable-pthreads \
  --enable-small \
  --enable-version3 \
  --extra-cflags=-I$TARGET_DIR/include \
  --extra-ldflags="-L$LIB_DIR -L/usr/lib" \
  --extra-libs="-ldl -lpthread -lm -lz" \
  --pkgconfigdir=$TARGET_DIR/lib/pkgconfig \
  --prefix=$TARGET_DIR \
  --extra-version=

execute make -j $jval
execute sudo make install

sudo ldconfig

FFMPEG_ROOT_DIR="/ffmpeg_root"
sudo mkdir -p $FFMPEG_ROOT_DIR/{bin,lib,share}
sudo cp -r $TARGET_DIR/bin/ffmpeg $FFMPEG_ROOT_DIR/bin/
ldd $TARGET_DIR/bin/ffmpeg | cut -d ' ' -f 3 | strings | sudo xargs -I R cp R $FFMPEG_ROOT_DIR/lib
for lib in $FFMPEG_ROOT_DIR/lib/*; do sudo strip --strip-all $lib; done
for lib in $FFMPEG_ROOT_DIR/lib/*.so.*; do sudo ln -sf "${lib##*/}" "${lib%%.so.*}".so; done
sudo cp -r $TARGET_DIR/share/ffmpeg $FFMPEG_ROOT_DIR/share/
sudo rm -rf $FFMPEG_ROOT_DIR/share/ffmpeg/examples
